private:
friend class static_constructor_for_action_agent;
struct static_constructor_for_action_agent
{
    static_constructor_for_action_agent();
};
static static_constructor_for_action_agent _static_constructor_;
#ifndef __meta_parse__
private:
using action_func_type = std::optional<bool> (action_agent::*)(const std::vector<json>&);

static std::unordered_map<std::string, action_func_type> action_funcs_map;

static void init_action_funcs_map(); // called in _static_constructor_

std::optional<bool> has_key_action_wrapper(const std::vector<json>& data);
std::optional<bool> has_key_value_action_wrapper(const std::vector<json>& data);
std::optional<bool> log_action_wrapper(const std::vector<json>& data);
std::optional<bool> log_bb_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_add_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_dec_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_div_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_larger_than_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_less_than_action_wrapper(const std::vector<json>& data);
std::optional<bool> number_multiply_action_wrapper(const std::vector<json>& data);
std::optional<bool> set_key_value_action_wrapper(const std::vector<json>& data);
std::optional<bool> wait_for_seconds_action_wrapper(const std::vector<json>& data);
#endif




